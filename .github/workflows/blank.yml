name: Fetch IPA URL and Update JSON

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at midnight UTC

jobs:
  fetch-ipa:
    runs-on: ubuntu-latest
    steps:
      - name: Get IPA URL, Version, Size, Created At Date
        id: get_ipa_url
        run: |
          # Fetch the latest release details from GitHub API
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/whoeevee/EeveeSpotify/releases/latest")
          
          # Extract IPA URL
          IPA_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".ipa")) | .browser_download_url')
          
          # Extract version from URL (between "EeveeSpotify-" and ".ipa")
          VERSION=$(echo "$IPA_URL" | sed -n 's/.*EeveeSpotify-\(.*\)\.ipa/\1/p')
          
          # Fetch file size (in bytes) from the asset information
          SIZE=$(echo "$RELEASE_INFO" | jq '.assets[] | select(.name | endswith(".ipa")) | .size')
          
          # Extract the created_at date from the API response and format it as yyyy-mm-dd
          CREATED_AT=$(echo "$RELEASE_INFO" | jq -r '.created_at' | sed 's/T/\ /' | sed 's/\..*//')  # Remove the time part
          FORMATTED_DATE=$(date -d "$CREATED_AT" +"%Y-%m-%d")  # Format the date

          # Export all variables as environment variables
          echo "ipa_url=\"$IPA_URL\"" >> $GITHUB_ENV
          echo "version=\"$VERSION\"" >> $GITHUB_ENV
          echo "size=$SIZE" >> $GITHUB_ENV
          echo "created_at=\"$FORMATTED_DATE\"" >> $GITHUB_ENV
          
          # Debugging output
          echo "Fetched IPA URL: $IPA_URL"
          echo "Extracted Version: $VERSION"
          echo "File Size: $SIZE bytes"
          echo "Release Created At: $FORMATTED_DATE"

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Verify Extracted Variables
        run: |
          # Verify extracted variables
          echo "IPA URL: ${{ env.ipa_url }}"
          echo "Version: ${{ env.version }}"
          echo "Size: ${{ env.size }} bytes"
          echo "Release Created At: ${{ env.created_at }}"

      - name: Update sidestore.json
        run: |
          # Print before modification for debugging
          cat sidestore.json
          
          # Update downloadURL, version, size, created_at in both `apps[0]` and `versions[0]`
          jq --arg ipa_url "${{ env.ipa_url }}" \
             --arg version "${{ env.version }}" \
             --argjson size "${{ env.size }}" \
             --arg created_at "${{ env.created_at }}" \
             '.apps[0].downloadURL = $ipa_url | 
              .apps[0].version = $version | 
              .apps[0].size = $size |
              .apps[0].versionDate = $created_at |   # Update versionDate
              .apps[0].createdAt = $created_at |     # Update createdAt for app-level
              .apps[0].versions[0].downloadURL = $ipa_url |
              .apps[0].versions[0].version = $version |
              .apps[0].versions[0].size = $size |
              .apps[0].versions[0].date = $created_at'  # Update date inside versions[0]
             sidestore.json > temp.json
             
          # Move the updated file back to sidestore.json
          mv temp.json sidestore.json
          
          # Print after modification to confirm the change
          cat sidestore.json

      - name: Check for Changes and Commit if Needed
        run: |
          # Check if there are changes in sidestore.json
          if git diff --exit-code sidestore.json; then
            echo "No changes detected in sidestore.json, skipping commit."
          else
            echo "Changes detected, committing..."
            git config --local user.email "niravraval34@gmail.com"
            git config --local user.name "Nirav-raval"
            git add sidestore.json
            git commit -m "Update downloadURL, version, size, versionDate, and date with latest IPA file information"
            git push
          fi
