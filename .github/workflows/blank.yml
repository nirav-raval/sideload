name: Fetch IPA URL and Update JSON

on:
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at midnight UTC

jobs:
  fetch-ipa:
    runs-on: ubuntu-latest
    steps:
      - name: Get IPA URL, Version, and Size
        id: get_ipa_url
        run: |
          # Fetch the latest IPA URL
          IPA_URL=$(curl -s "https://api.github.com/repos/whoeevee/EeveeSpotify/releases/latest" | 
          jq -r '.assets[] | select(.name | endswith(".ipa")) | .browser_download_url')
          
          if [ -z "$IPA_URL" ]; then
            echo "Error: IPA file URL not found in the release assets."
            exit 1
          fi
          echo "Fetched IPA URL: $IPA_URL"

          # Extract version from URL (e.g., "EeveeSpotify-5.8.1-8.9.92.ipa")
          VERSION=$(echo "$IPA_URL" | grep -oP 'EeveeSpotify-\K[\d.]+(?=-[\d.]+\.ipa)')
          
          if [ -z "$VERSION" ]; then
            echo "Error: Version could not be extracted from the IPA file URL."
            exit 1
          fi
          echo "Extracted Version: $VERSION"

          # Fetch the file size (in bytes)
          SIZE=$(curl -s "https://api.github.com/repos/whoeevee/EeveeSpotify/releases/latest" | 
          jq '.assets[] | select(.name | endswith(".ipa")) | .size')

          if [ -z "$SIZE" ]; then
            echo "Error: File size not found for the IPA file."
            exit 1
          fi
          echo "File Size: $SIZE bytes"

          # Export environment variables
          echo "ipa_url=${IPA_URL}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_ENV
          echo "size=${SIZE}" >> $GITHUB_ENV

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Verify Extracted Variables
        run: |
          echo "IPA URL: ${{ env.ipa_url }}"
          echo "Version: ${{ env.version }}"
          echo "Size: ${{ env.size }} bytes"

      - name: Update sidestore.json
        run: |
          # Print before modification for debugging
          echo "sidestore.json before update:"
          cat sidestore.json

          # Update the JSON file
          jq --arg ipa_url "${{ env.ipa_url }}" \
             --arg version "${{ env.version }}" \
             --argjson size "${{ env.size }}" \
             '.apps[0].downloadURL = $ipa_url | 
              .apps[0].version = $version | 
              .apps[0].size = $size |
              .apps[0].versions[0].downloadURL = $ipa_url |
              .apps[0].versions[0].version = $version |
              .apps[0].versions[0].size = $size' \
             sidestore.json > temp.json
          mv temp.json sidestore.json

          # Print updated JSON for debugging
          echo "sidestore.json after update:"
          cat sidestore.json

      - name: Check for Changes and Commit if Needed
        run: |
          # Check for changes
          if git diff --exit-code sidestore.json; then
            echo "No changes detected in sidestore.json."
          else
            echo "Changes detected, committing and pushing."
            git config --local user.email "niravraval34@gmail.com"
            git config --local user.name "Nirav-raval"
            git add sidestore.json
            git commit -m "Update sidestore.json with latest IPA details"
            git push
          fi
